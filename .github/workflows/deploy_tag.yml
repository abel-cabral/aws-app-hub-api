name: Deploy Project

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout do código
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configurar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Instalar dependências
        run: npm ci

      - name: Rodar build
        run: npm run build

      - name: Obter versão do package.json
        id: obter_versao
        run: |
          echo "VERSION=$(node -p -e "require('./package.json').version")" >> $GITHUB_ENV

      - name: Compactar arquivos da build
        run: |
          cd build
          zip -r "../v${{ env.VERSION }}.zip" ./*

      - name: Criar e subir tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          # Cria a nova tag
          git tag "v${{ env.VERSION }}"
          git push origin "v${{ env.VERSION }}"

      - name: Criar Release no GitHub e anexar o ZIP
        uses: actions/github-script@v6
        with:
          script: |
            const version = process.env.VERSION;
            const release_name = `v${version}`;
            const release_notes = `Release da versão ${release_name}`;
            
            // Cria a release
            const release = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: release_name,
              name: release_name,
              body: release_notes,
              draft: false,
              prerelease: false
            });

            // Anexa o arquivo ZIP à release
            const fs = require('fs');
            const path = require('path');
            const zipFilePath = `v${version}.zip`;

            // Lê o arquivo ZIP e faz o upload
            const data = fs.readFileSync(zipFilePath);
            await github.rest.repos.uploadReleaseAsset({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release.data.id,
              data: data,
              name: zipFilePath,
              headers: {
                'content-type': 'application/zip',
                'content-length': data.length
              }
            });