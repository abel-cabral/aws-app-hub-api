name: Build Project

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout do código
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configurar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Instalar dependências e rodar build
        run: |
          npm ci
          npm run build

      - name: Obter versão do package.json
        id: obter_versao
        run: echo "VERSION=$(node -p -e "require('./package.json').version")" >> $GITHUB_ENV

      - name: Verificar se a versão já está publicada
        id: verificar_versao
        run: |
          if git ls-remote --tags origin | grep -q "refs/tags/v${{ env.VERSION }}"; then
            echo "A versão ${{ env.VERSION }} já está publicada."
            exit 1
          fi

      - name: Compactar arquivos da build
        run: zip -r "build/v${{ env.VERSION }}.zip" build/*

      - name: Upload do arquivo zip como artefato
        uses: actions/upload-artifact@v4
        with:
          name: "v${{ env.VERSION }}.zip"
          path: "build/v${{ env.VERSION }}.zip"

      - name: Criar e subir tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          # Deleta a tag se ela já existir
          git ls-remote --tags origin | grep -q "refs/tags/v${{ env.VERSION }}" && \
          git push origin --delete "v${{ env.VERSION }}" && \
          echo "Tag v${{ env.VERSION }} já existia e foi deletada."

          # Cria e envia a nova tag
          git tag "v${{ env.VERSION }}"
          git push origin "v${{ env.VERSION }}"